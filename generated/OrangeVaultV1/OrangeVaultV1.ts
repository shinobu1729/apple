// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Action extends ethereum.Event {
  get params(): Action__Params {
    return new Action__Params(this);
  }
}

export class Action__Params {
  _event: Action;

  constructor(event: Action) {
    this._event = event;
  }

  get actionType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralAmount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get debtAmount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityAmount0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidityAmount1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get accruedFees0(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get accruedFees1(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get vaultAmount0(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get vaultAmount1(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get totalAssets(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BurnAndCollectFees extends ethereum.Event {
  get params(): BurnAndCollectFees__Params {
    return new BurnAndCollectFees__Params(this);
  }
}

export class BurnAndCollectFees__Params {
  _event: BurnAndCollectFees;

  constructor(event: BurnAndCollectFees) {
    this._event = event;
  }

  get burn0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get burn1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fee1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OrangeVaultV1__getUnderlyingBalancesResultUnderlyingAssetsStruct extends ethereum.Tuple {
  get liquidityAmount0(): BigInt {
    return this[0].toBigInt();
  }

  get liquidityAmount1(): BigInt {
    return this[1].toBigInt();
  }

  get accruedFees0(): BigInt {
    return this[2].toBigInt();
  }

  get accruedFees1(): BigInt {
    return this[3].toBigInt();
  }

  get vaultAmount0(): BigInt {
    return this[4].toBigInt();
  }

  get vaultAmount1(): BigInt {
    return this[5].toBigInt();
  }
}

export class OrangeVaultV1 extends ethereum.SmartContract {
  static bind(address: Address): OrangeVaultV1 {
    return new OrangeVaultV1("OrangeVaultV1", address);
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balancer(): Address {
    let result = super.call("balancer", "balancer():(address)", []);

    return result[0].toAddress();
  }

  try_balancer(): ethereum.CallResult<Address> {
    let result = super.tryCall("balancer", "balancer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  convertToAssets(_shares: BigInt): BigInt {
    let result = super.call(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_shares)]
    );

    return result[0].toBigInt();
  }

  try_convertToAssets(_shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(_assets: BigInt): BigInt {
    let result = super.call(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_assets)]
    );

    return result[0].toBigInt();
  }

  try_convertToShares(_assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  deposit(
    _shares: BigInt,
    _maxAssets: BigInt,
    _merkleProof: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "deposit",
      "deposit(uint256,uint256,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_shares),
        ethereum.Value.fromUnsignedBigInt(_maxAssets),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );

    return result[0].toBigInt();
  }

  try_deposit(
    _shares: BigInt,
    _maxAssets: BigInt,
    _merkleProof: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint256,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_shares),
        ethereum.Value.fromUnsignedBigInt(_maxAssets),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  flashloanHash(): Bytes {
    let result = super.call("flashloanHash", "flashloanHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_flashloanHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "flashloanHash",
      "flashloanHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUnderlyingBalances(): OrangeVaultV1__getUnderlyingBalancesResultUnderlyingAssetsStruct {
    let result = super.call(
      "getUnderlyingBalances",
      "getUnderlyingBalances():((uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<
      OrangeVaultV1__getUnderlyingBalancesResultUnderlyingAssetsStruct
    >(result[0].toTuple());
  }

  try_getUnderlyingBalances(): ethereum.CallResult<
    OrangeVaultV1__getUnderlyingBalancesResultUnderlyingAssetsStruct
  > {
    let result = super.tryCall(
      "getUnderlyingBalances",
      "getUnderlyingBalances():((uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        OrangeVaultV1__getUnderlyingBalancesResultUnderlyingAssetsStruct
      >(value[0].toTuple())
    );
  }

  hasPosition(): boolean {
    let result = super.call("hasPosition", "hasPosition():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasPosition(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasPosition", "hasPosition():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lendingPool(): Address {
    let result = super.call("lendingPool", "lendingPool():(address)", []);

    return result[0].toAddress();
  }

  try_lendingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("lendingPool", "lendingPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityPool(): Address {
    let result = super.call("liquidityPool", "liquidityPool():(address)", []);

    return result[0].toAddress();
  }

  try_liquidityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityPool",
      "liquidityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lowerTick(): i32 {
    let result = super.call("lowerTick", "lowerTick():(int24)", []);

    return result[0].toI32();
  }

  try_lowerTick(): ethereum.CallResult<i32> {
    let result = super.tryCall("lowerTick", "lowerTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  params(): Address {
    let result = super.call("params", "params():(address)", []);

    return result[0].toAddress();
  }

  try_params(): ethereum.CallResult<Address> {
    let result = super.tryCall("params", "params():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeem(_shares: BigInt, _minAssets: BigInt): BigInt {
    let result = super.call("redeem", "redeem(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_shares),
      ethereum.Value.fromUnsignedBigInt(_minAssets)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(_shares: BigInt, _minAssets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_shares),
      ethereum.Value.fromUnsignedBigInt(_minAssets)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  routerFee(): i32 {
    let result = super.call("routerFee", "routerFee():(uint24)", []);

    return result[0].toI32();
  }

  try_routerFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("routerFee", "routerFee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  upperTick(): i32 {
    let result = super.call("upperTick", "upperTick():(int24)", []);

    return result[0].toI32();
  }

  try_upperTick(): ethereum.CallResult<i32> {
    let result = super.tryCall("upperTick", "upperTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _token0(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _liquidityPool(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _lendingPool(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _params(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _router(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _routerFee(): i32 {
    return this._call.inputValues[8].value.toI32();
  }

  get _balancer(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxAssets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmitActionCall extends ethereum.Call {
  get inputs(): EmitActionCall__Inputs {
    return new EmitActionCall__Inputs(this);
  }

  get outputs(): EmitActionCall__Outputs {
    return new EmitActionCall__Outputs(this);
  }
}

export class EmitActionCall__Inputs {
  _call: EmitActionCall;

  constructor(call: EmitActionCall) {
    this._call = call;
  }

  get _actionType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class EmitActionCall__Outputs {
  _call: EmitActionCall;

  constructor(call: EmitActionCall) {
    this._call = call;
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get value1(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get value2(): RebalanceCallValue2Struct {
    return changetype<RebalanceCallValue2Struct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCallValue2Struct extends ethereum.Tuple {
  get collateralAmount0(): BigInt {
    return this[0].toBigInt();
  }

  get debtAmount1(): BigInt {
    return this[1].toBigInt();
  }

  get token0Balance(): BigInt {
    return this[2].toBigInt();
  }

  get token1Balance(): BigInt {
    return this[3].toBigInt();
  }
}

export class ReceiveFlashLoanCall extends ethereum.Call {
  get inputs(): ReceiveFlashLoanCall__Inputs {
    return new ReceiveFlashLoanCall__Inputs(this);
  }

  get outputs(): ReceiveFlashLoanCall__Outputs {
    return new ReceiveFlashLoanCall__Outputs(this);
  }
}

export class ReceiveFlashLoanCall__Inputs {
  _call: ReceiveFlashLoanCall;

  constructor(call: ReceiveFlashLoanCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _userData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ReceiveFlashLoanCall__Outputs {
  _call: ReceiveFlashLoanCall;

  constructor(call: ReceiveFlashLoanCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minAssets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get returnAssets_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StoplossCall extends ethereum.Call {
  get inputs(): StoplossCall__Inputs {
    return new StoplossCall__Inputs(this);
  }

  get outputs(): StoplossCall__Outputs {
    return new StoplossCall__Outputs(this);
  }
}

export class StoplossCall__Inputs {
  _call: StoplossCall;

  constructor(call: StoplossCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class StoplossCall__Outputs {
  _call: StoplossCall;

  constructor(call: StoplossCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
