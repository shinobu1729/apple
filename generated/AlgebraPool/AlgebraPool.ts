// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get topTick(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get liquidityAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Collect extends ethereum.Event {
  get params(): Collect__Params {
    return new Collect__Params(this);
  }
}

export class Collect__Params {
  _event: Collect;

  constructor(event: Collect) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get topTick(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amount0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CommunityFee extends ethereum.Event {
  get params(): CommunityFee__Params {
    return new CommunityFee__Params(this);
  }
}

export class CommunityFee__Params {
  _event: CommunityFee;

  constructor(event: CommunityFee) {
    this._event = event;
  }

  get communityFee0New(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get communityFee1New(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Fee extends ethereum.Event {
  get params(): Fee__Params {
    return new Fee__Params(this);
  }
}

export class Fee__Params {
  _event: Fee;

  constructor(event: Fee) {
    this._event = event;
  }

  get feeZto(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get feeOtz(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Flash extends ethereum.Event {
  get params(): Flash__Params {
    return new Flash__Params(this);
  }
}

export class Flash__Params {
  _event: Flash;

  constructor(event: Flash) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get paid0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get paid1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Incentive extends ethereum.Event {
  get params(): Incentive__Params {
    return new Incentive__Params(this);
  }
}

export class Incentive__Params {
  _event: Incentive;

  constructor(event: Incentive) {
    this._event = event;
  }

  get virtualPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialize extends ethereum.Event {
  get params(): Initialize__Params {
    return new Initialize__Params(this);
  }
}

export class Initialize__Params {
  _event: Initialize;

  constructor(event: Initialize) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tick(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class LiquidityCooldown extends ethereum.Event {
  get params(): LiquidityCooldown__Params {
    return new LiquidityCooldown__Params(this);
  }
}

export class LiquidityCooldown__Params {
  _event: LiquidityCooldown;

  constructor(event: LiquidityCooldown) {
    this._event = event;
  }

  get liquidityCooldown(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get topTick(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get liquidityAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get tick(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class TickSpacing extends ethereum.Event {
  get params(): TickSpacing__Params {
    return new TickSpacing__Params(this);
  }
}

export class TickSpacing__Params {
  _event: TickSpacing;

  constructor(event: TickSpacing) {
    this._event = event;
  }

  get newTickSpacing(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class AlgebraPool__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class AlgebraPool__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class AlgebraPool__getInnerCumulativesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getInnerTickCumulative(): BigInt {
    return this.value0;
  }

  getInnerSecondsSpentPerLiquidity(): BigInt {
    return this.value1;
  }

  getInnerSecondsSpent(): BigInt {
    return this.value2;
  }
}

export class AlgebraPool__getTimepointsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }

  getTickCumulatives(): Array<BigInt> {
    return this.value0;
  }

  getSecondsPerLiquidityCumulatives(): Array<BigInt> {
    return this.value1;
  }

  getVolatilityCumulatives(): Array<BigInt> {
    return this.value2;
  }

  getVolumePerAvgLiquiditys(): Array<BigInt> {
    return this.value3;
  }
}

export class AlgebraPool__globalStateResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: boolean;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getPrice(): BigInt {
    return this.value0;
  }

  getTick(): i32 {
    return this.value1;
  }

  getFeeZto(): i32 {
    return this.value2;
  }

  getFeeOtz(): i32 {
    return this.value3;
  }

  getTimepointIndex(): i32 {
    return this.value4;
  }

  getCommunityFeeToken0(): i32 {
    return this.value5;
  }

  getCommunityFeeToken1(): i32 {
    return this.value6;
  }

  getUnlocked(): boolean {
    return this.value7;
  }
}

export class AlgebraPool__mintResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }

  getLiquidityActual(): BigInt {
    return this.value2;
  }
}

export class AlgebraPool__positionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getLiquidity(): BigInt {
    return this.value0;
  }

  getLastLiquidityAddTimestamp(): BigInt {
    return this.value1;
  }

  getInnerFeeGrowth0Token(): BigInt {
    return this.value2;
  }

  getInnerFeeGrowth1Token(): BigInt {
    return this.value3;
  }

  getFees0(): BigInt {
    return this.value4;
  }

  getFees1(): BigInt {
    return this.value5;
  }
}

export class AlgebraPool__swapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class AlgebraPool__swapSupportingFeeOnInputTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class AlgebraPool__ticksResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getLiquidityTotal(): BigInt {
    return this.value0;
  }

  getLiquidityDelta(): BigInt {
    return this.value1;
  }

  getOuterFeeGrowth0Token(): BigInt {
    return this.value2;
  }

  getOuterFeeGrowth1Token(): BigInt {
    return this.value3;
  }

  getOuterTickCumulative(): BigInt {
    return this.value4;
  }

  getOuterSecondsPerLiquidity(): BigInt {
    return this.value5;
  }

  getOuterSecondsSpent(): BigInt {
    return this.value6;
  }

  getInitialized(): boolean {
    return this.value7;
  }
}

export class AlgebraPool__timepointsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: i32;
  value6: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: i32,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromI32(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getInitialized(): boolean {
    return this.value0;
  }

  getBlockTimestamp(): BigInt {
    return this.value1;
  }

  getTickCumulative(): BigInt {
    return this.value2;
  }

  getSecondsPerLiquidityCumulative(): BigInt {
    return this.value3;
  }

  getVolatilityCumulative(): BigInt {
    return this.value4;
  }

  getAverageTick(): i32 {
    return this.value5;
  }

  getVolumePerLiquidityCumulative(): BigInt {
    return this.value6;
  }
}

export class AlgebraPool extends ethereum.SmartContract {
  static bind(address: Address): AlgebraPool {
    return new AlgebraPool("AlgebraPool", address);
  }

  activeIncentive(): Address {
    let result = super.call(
      "activeIncentive",
      "activeIncentive():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_activeIncentive(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "activeIncentive",
      "activeIncentive():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burn(bottomTick: i32, topTick: i32, amount: BigInt): AlgebraPool__burnResult {
    let result = super.call(
      "burn",
      "burn(int24,int24,uint128):(uint256,uint256)",
      [
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new AlgebraPool__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_burn(
    bottomTick: i32,
    topTick: i32,
    amount: BigInt
  ): ethereum.CallResult<AlgebraPool__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(int24,int24,uint128):(uint256,uint256)",
      [
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__burnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collect(
    recipient: Address,
    bottomTick: i32,
    topTick: i32,
    amount0Requested: BigInt,
    amount1Requested: BigInt
  ): AlgebraPool__collectResult {
    let result = super.call(
      "collect",
      "collect(address,int24,int24,uint128,uint128):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(amount0Requested),
        ethereum.Value.fromUnsignedBigInt(amount1Requested)
      ]
    );

    return new AlgebraPool__collectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collect(
    recipient: Address,
    bottomTick: i32,
    topTick: i32,
    amount0Requested: BigInt,
    amount1Requested: BigInt
  ): ethereum.CallResult<AlgebraPool__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect(address,int24,int24,uint128,uint128):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(amount0Requested),
        ethereum.Value.fromUnsignedBigInt(amount1Requested)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  dataStorageOperator(): Address {
    let result = super.call(
      "dataStorageOperator",
      "dataStorageOperator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dataStorageOperator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dataStorageOperator",
      "dataStorageOperator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInnerCumulatives(
    bottomTick: i32,
    topTick: i32
  ): AlgebraPool__getInnerCumulativesResult {
    let result = super.call(
      "getInnerCumulatives",
      "getInnerCumulatives(int24,int24):(int56,uint160,uint32)",
      [ethereum.Value.fromI32(bottomTick), ethereum.Value.fromI32(topTick)]
    );

    return new AlgebraPool__getInnerCumulativesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getInnerCumulatives(
    bottomTick: i32,
    topTick: i32
  ): ethereum.CallResult<AlgebraPool__getInnerCumulativesResult> {
    let result = super.tryCall(
      "getInnerCumulatives",
      "getInnerCumulatives(int24,int24):(int56,uint160,uint32)",
      [ethereum.Value.fromI32(bottomTick), ethereum.Value.fromI32(topTick)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__getInnerCumulativesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getTimepoints(secondsAgos: Array<BigInt>): AlgebraPool__getTimepointsResult {
    let result = super.call(
      "getTimepoints",
      "getTimepoints(uint32[]):(int56[],uint160[],uint112[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(secondsAgos)]
    );

    return new AlgebraPool__getTimepointsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray()
    );
  }

  try_getTimepoints(
    secondsAgos: Array<BigInt>
  ): ethereum.CallResult<AlgebraPool__getTimepointsResult> {
    let result = super.tryCall(
      "getTimepoints",
      "getTimepoints(uint32[]):(int56[],uint160[],uint112[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(secondsAgos)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__getTimepointsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray()
      )
    );
  }

  globalState(): AlgebraPool__globalStateResult {
    let result = super.call(
      "globalState",
      "globalState():(uint160,int24,uint16,uint16,uint16,uint8,uint8,bool)",
      []
    );

    return new AlgebraPool__globalStateResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toBoolean()
    );
  }

  try_globalState(): ethereum.CallResult<AlgebraPool__globalStateResult> {
    let result = super.tryCall(
      "globalState",
      "globalState():(uint160,int24,uint16,uint16,uint16,uint8,uint8,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__globalStateResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toBoolean()
      )
    );
  }

  liquidity(): BigInt {
    let result = super.call("liquidity", "liquidity():(uint128)", []);

    return result[0].toBigInt();
  }

  try_liquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidity", "liquidity():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityCooldown(): BigInt {
    let result = super.call(
      "liquidityCooldown",
      "liquidityCooldown():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityCooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityCooldown",
      "liquidityCooldown():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLiquidityPerTick(): BigInt {
    let result = super.call(
      "maxLiquidityPerTick",
      "maxLiquidityPerTick():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxLiquidityPerTick(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLiquidityPerTick",
      "maxLiquidityPerTick():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    sender: Address,
    recipient: Address,
    bottomTick: i32,
    topTick: i32,
    liquidityDesired: BigInt,
    data: Bytes
  ): AlgebraPool__mintResult {
    let result = super.call(
      "mint",
      "mint(address,address,int24,int24,uint128,bytes):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(liquidityDesired),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new AlgebraPool__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_mint(
    sender: Address,
    recipient: Address,
    bottomTick: i32,
    topTick: i32,
    liquidityDesired: BigInt,
    data: Bytes
  ): ethereum.CallResult<AlgebraPool__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,address,int24,int24,uint128,bytes):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(liquidityDesired),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__mintResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  positions(param0: Bytes): AlgebraPool__positionsResult {
    let result = super.call(
      "positions",
      "positions(bytes32):(uint128,uint32,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new AlgebraPool__positionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_positions(
    param0: Bytes
  ): ethereum.CallResult<AlgebraPool__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(bytes32):(uint128,uint32,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__positionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  swap(
    recipient: Address,
    zeroToOne: boolean,
    amountRequired: BigInt,
    limitSqrtPrice: BigInt,
    data: Bytes
  ): AlgebraPool__swapResult {
    let result = super.call(
      "swap",
      "swap(address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroToOne),
        ethereum.Value.fromSignedBigInt(amountRequired),
        ethereum.Value.fromUnsignedBigInt(limitSqrtPrice),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new AlgebraPool__swapResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swap(
    recipient: Address,
    zeroToOne: boolean,
    amountRequired: BigInt,
    limitSqrtPrice: BigInt,
    data: Bytes
  ): ethereum.CallResult<AlgebraPool__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap(address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroToOne),
        ethereum.Value.fromSignedBigInt(amountRequired),
        ethereum.Value.fromUnsignedBigInt(limitSqrtPrice),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__swapResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  swapSupportingFeeOnInputTokens(
    sender: Address,
    recipient: Address,
    zeroToOne: boolean,
    amountRequired: BigInt,
    limitSqrtPrice: BigInt,
    data: Bytes
  ): AlgebraPool__swapSupportingFeeOnInputTokensResult {
    let result = super.call(
      "swapSupportingFeeOnInputTokens",
      "swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroToOne),
        ethereum.Value.fromSignedBigInt(amountRequired),
        ethereum.Value.fromUnsignedBigInt(limitSqrtPrice),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new AlgebraPool__swapSupportingFeeOnInputTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapSupportingFeeOnInputTokens(
    sender: Address,
    recipient: Address,
    zeroToOne: boolean,
    amountRequired: BigInt,
    limitSqrtPrice: BigInt,
    data: Bytes
  ): ethereum.CallResult<AlgebraPool__swapSupportingFeeOnInputTokensResult> {
    let result = super.tryCall(
      "swapSupportingFeeOnInputTokens",
      "swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroToOne),
        ethereum.Value.fromSignedBigInt(amountRequired),
        ethereum.Value.fromUnsignedBigInt(limitSqrtPrice),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__swapSupportingFeeOnInputTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  tickSpacing(): i32 {
    let result = super.call("tickSpacing", "tickSpacing():(int24)", []);

    return result[0].toI32();
  }

  try_tickSpacing(): ethereum.CallResult<i32> {
    let result = super.tryCall("tickSpacing", "tickSpacing():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  tickTable(param0: i32): BigInt {
    let result = super.call("tickTable", "tickTable(int16):(uint256)", [
      ethereum.Value.fromI32(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tickTable(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tickTable", "tickTable(int16):(uint256)", [
      ethereum.Value.fromI32(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ticks(param0: i32): AlgebraPool__ticksResult {
    let result = super.call(
      "ticks",
      "ticks(int24):(uint128,int128,uint256,uint256,int56,uint160,uint32,bool)",
      [ethereum.Value.fromI32(param0)]
    );

    return new AlgebraPool__ticksResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_ticks(param0: i32): ethereum.CallResult<AlgebraPool__ticksResult> {
    let result = super.tryCall(
      "ticks",
      "ticks(int24):(uint128,int128,uint256,uint256,int56,uint160,uint32,bool)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__ticksResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }

  timepoints(index: BigInt): AlgebraPool__timepointsResult {
    let result = super.call(
      "timepoints",
      "timepoints(uint256):(bool,uint32,int56,uint160,uint88,int24,uint144)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new AlgebraPool__timepointsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toBigInt()
    );
  }

  try_timepoints(
    index: BigInt
  ): ethereum.CallResult<AlgebraPool__timepointsResult> {
    let result = super.tryCall(
      "timepoints",
      "timepoints(uint256):(bool,uint32,int56,uint160,uint88,int24,uint144)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlgebraPool__timepointsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toBigInt()
      )
    );
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalFeeGrowth0Token(): BigInt {
    let result = super.call(
      "totalFeeGrowth0Token",
      "totalFeeGrowth0Token():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeeGrowth0Token(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeGrowth0Token",
      "totalFeeGrowth0Token():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFeeGrowth1Token(): BigInt {
    let result = super.call(
      "totalFeeGrowth1Token",
      "totalFeeGrowth1Token():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeeGrowth1Token(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeGrowth1Token",
      "totalFeeGrowth1Token():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get bottomTick(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get topTick(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get topTick(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get amount0Requested(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount1Requested(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class FlashCall extends ethereum.Call {
  get inputs(): FlashCall__Inputs {
    return new FlashCall__Inputs(this);
  }

  get outputs(): FlashCall__Outputs {
    return new FlashCall__Outputs(this);
  }
}

export class FlashCall__Inputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashCall__Outputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get topTick(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get liquidityDesired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidityActual(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class SetCommunityFeeCall extends ethereum.Call {
  get inputs(): SetCommunityFeeCall__Inputs {
    return new SetCommunityFeeCall__Inputs(this);
  }

  get outputs(): SetCommunityFeeCall__Outputs {
    return new SetCommunityFeeCall__Outputs(this);
  }
}

export class SetCommunityFeeCall__Inputs {
  _call: SetCommunityFeeCall;

  constructor(call: SetCommunityFeeCall) {
    this._call = call;
  }

  get communityFee0(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get communityFee1(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetCommunityFeeCall__Outputs {
  _call: SetCommunityFeeCall;

  constructor(call: SetCommunityFeeCall) {
    this._call = call;
  }
}

export class SetIncentiveCall extends ethereum.Call {
  get inputs(): SetIncentiveCall__Inputs {
    return new SetIncentiveCall__Inputs(this);
  }

  get outputs(): SetIncentiveCall__Outputs {
    return new SetIncentiveCall__Outputs(this);
  }
}

export class SetIncentiveCall__Inputs {
  _call: SetIncentiveCall;

  constructor(call: SetIncentiveCall) {
    this._call = call;
  }

  get virtualPoolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetIncentiveCall__Outputs {
  _call: SetIncentiveCall;

  constructor(call: SetIncentiveCall) {
    this._call = call;
  }
}

export class SetLiquidityCooldownCall extends ethereum.Call {
  get inputs(): SetLiquidityCooldownCall__Inputs {
    return new SetLiquidityCooldownCall__Inputs(this);
  }

  get outputs(): SetLiquidityCooldownCall__Outputs {
    return new SetLiquidityCooldownCall__Outputs(this);
  }
}

export class SetLiquidityCooldownCall__Inputs {
  _call: SetLiquidityCooldownCall;

  constructor(call: SetLiquidityCooldownCall) {
    this._call = call;
  }

  get newLiquidityCooldown(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidityCooldownCall__Outputs {
  _call: SetLiquidityCooldownCall;

  constructor(call: SetLiquidityCooldownCall) {
    this._call = call;
  }
}

export class SetTickSpacingCall extends ethereum.Call {
  get inputs(): SetTickSpacingCall__Inputs {
    return new SetTickSpacingCall__Inputs(this);
  }

  get outputs(): SetTickSpacingCall__Outputs {
    return new SetTickSpacingCall__Outputs(this);
  }
}

export class SetTickSpacingCall__Inputs {
  _call: SetTickSpacingCall;

  constructor(call: SetTickSpacingCall) {
    this._call = call;
  }

  get newTickSpacing(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetTickSpacingCall__Outputs {
  _call: SetTickSpacingCall;

  constructor(call: SetTickSpacingCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get zeroToOne(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get amountRequired(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get limitSqrtPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapSupportingFeeOnInputTokensCall extends ethereum.Call {
  get inputs(): SwapSupportingFeeOnInputTokensCall__Inputs {
    return new SwapSupportingFeeOnInputTokensCall__Inputs(this);
  }

  get outputs(): SwapSupportingFeeOnInputTokensCall__Outputs {
    return new SwapSupportingFeeOnInputTokensCall__Outputs(this);
  }
}

export class SwapSupportingFeeOnInputTokensCall__Inputs {
  _call: SwapSupportingFeeOnInputTokensCall;

  constructor(call: SwapSupportingFeeOnInputTokensCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get zeroToOne(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get amountRequired(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get limitSqrtPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SwapSupportingFeeOnInputTokensCall__Outputs {
  _call: SwapSupportingFeeOnInputTokensCall;

  constructor(call: SwapSupportingFeeOnInputTokensCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
